str(mle)
mle$parameters$mean
1/mle$parameters$variance$sigmasq
mle$parameters$pro
mle$classification
gibbs2=gibbsNORMALMIX(xobs=x.sample,C=3,
init=list(z=binary_group_ind(mle$classification,G=3),mu=mle$parameters$mean),
n_iter=11000,n_burnin=1000)
str(gibbs2)
round(colMeans(gibbs2$Mu),3)
round(colMeans(gibbs2$Tau),3)
round(colMeans(gibbs2$W),3)
round(apply(gibbs2$Mu,2,sd),3)
round(apply(gibbs2$Tau,2,sd),3)
round(apply(gibbs2$W,2,sd),3)
plot(gibbs2$W[,"w1"],type="l",col="chartreuse4",ylim=c(0,1),xlab="Iteration",ylab="w",
main="MCMC samples of the mixture weights")
lines(gibbs2$W[,"w2"],type="l",col="blueviolet")
lines(gibbs2$W[,"w3"],type="l",col="darkturquoise")
legend("top",legend=expression(w[1],w[2],w[3]),text.col=c("chartreuse4","blueviolet","darkturquoise"),
col=c("chartreuse4","blueviolet","darkturquoise"),lty=1,cex=1.5,
horiz=TRUE,bty="n")
loglikNORMALMIX=function(xobs,mu,tau,w){
out=prod(log(apply(w*sapply(xobs,dnorm,mean=mu,sd=sqrt(1/tau)),2,sum)))
return(out)
}
likNORMALMIX=function(xobs,mu,tau,w){
out=exp(loglikNORMALMIX(xobs,mu,tau,w))
return(out)
}
loglikNORMALMIX(xobs=x.sample,mu=mu.true,tau=tau.true,w=w.true)
loglikNORMALMIX(xobs=x.sample,mu=mu.true[3:1],tau=tau.true[3:1],w=w.true[3:1])
rm(gibbsNORMALMIX())
rm(gibbsNORMALMIX
rm(gibbsNORMALMIX)
rm(gibbsPLMIX
rm(gibbsPLMIX)
rm(likNORMALMIX)
rm(loglikNORMALMIX)
J=length(gibbs1)
J
gibbs1
L=nrow(W_mle)
J=3
mcmc.samples=array(c(Mu_mle,Tau_mle,W_mle),dim=c(L,C,J))
pra(mcmc.pars = mcmc.samples, pivot = cbind(mc_clust$parameters$mean, 1/mc_clust$parameters$variance$sigmasq, mc_clust$parameters$pro))
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust$parameters$mean, 1/mc_clust$parameters$variance$sigmasq, mc_clust$parameters$pro))
mcmc_samples=array(c(Mu_mle,Tau_mle,W_mle),dim=c(L,C,J))
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust$parameters$mean, 1/mc_clust$parameters$variance$sigmasq, mc_clust$parameters$pro))
rm(mcmc.samples)
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust$parameters$mean, 1/mc_clust$parameters$variance$sigmasq, mc_clust$parameters$pro))
names(pra_out)
attributes(pra_out)
pra_out$permutations
permuted_mcmc = permute.mcmc(mcmc =  mcmc_samples, permutations = pra_out)
permuted_mcmc = permute.mcmc(mcmc =  mcmc_samples, permutations = pra_out$permutations)
permuted_mcmc$output
show_mcmc(permuted_mcmc)
show_mcmc(permuted_mcmc$output)
dim(permuted_mcmc$output)
apply(permuted_mcmc$output, 3, colMeans)
apply(permuted_mcmc$output, 2:3, sd)
colMeans(W)
apply(permuted_mcmc$output, 1, colMeans)
apply(permuted_mcmc$output, 2
apply(permuted_mcmc$output, 2, colMeans)
apply(permuted_mcmc$output, 2, colMeans)
apply(permuted_mcmc$output, 3, colMeans)
colMeans(W)
colMeans(Mu)
apply(permuted_mcmc$output, 3, colMeans)
colMeans(Tau)
mean(Tau)
Tau
mean(Tau)
colMeans(W)
colMeans(Mu)
mean(Tau)
apply(permuted_mcmc$output, 3, colMeans)
colMeans(W)
colMeans(Mu)
mean(Tau)
colMeans(W)
colMeans(Mu)
apply(permuted_mcmc$output, 2:3, sd)
C
plot(permuted_mcmc$output[,1,3], type='l', ylim=c(0,1))
lines(permuted_mcmc$output[,2,3], type='l')
lines(permuted_mcmc$output[,3,3], type='l')
par(mfrow=c(1,1))
plot(permuted_mcmc$output[,1,3], type='l', ylim=c(0,1))
lines(permuted_mcmc$output[,2,3], type='l')
lines(permuted_mcmc$output[,2,3], type='l', col='red')
par(mfrow=c(1,1))
plot(permuted_mcmc$output[,1,3], type='l', ylim=c(0,1))
lines(permuted_mcmc$output[,2,3], type='l', col='red')
par(mfrow=c(1,1))
plot(permuted_mcmc$output[,1,3], type='l', ylim=c(-10,10))
lines(permuted_mcmc$output[,2,3], type='l', col='red')
permuted_mcmc$output[,2,3]
W_mle
colMeans(W_mle)
colMeans(Tau_mle)
colMeans(Mu_mle)
1/mc_clust$parameters$variance$sigmasq
source('helper.R')
setwd("~/Desktop/Uni/computational/final_project")
N = 100
w = c(0.2, 0.8)
C = 2
comp = sample(1:C,
prob = w,
size = N,
replace = TRUE)
mu = rnorm(C, 0, 10)
tau = rgamma(1, 2, 6)
x = rnorm(n = N,
mean = mu[comp],
sd = sqrt(1 / tau))
z = binary_group_ind(comp, G = C)
curve(d_norm_mix(x, mu = mu, tau = tau, w = w),
from = -10,
to = 10)
all_S = mix_gauss_2D(mu, tau, z)
plot(
x = all_S[, 1],
y = all_S[, 2],
col = all_S[, 3],
pch = 16,
cex = .7,
xlab = 'x1',
ylab = 'x2',
main = 'Mix'
)
mu_1=seq(-10,10,length.out=length(x))
mu_2=seq(-10,10,length.out=length(x))
plot(mu_1, eval_l(mu_1,mu_2, w = w , x = x, TRUE), type='l', ylab = 'log-likelihood')
posterior_eval = outer(mu_1, mu_2, eval_l, w=w, x=x)
image(mu_1, mu_2, posterior_eval, xlab = expression(mu1), ylab = expression(mu2))
contour(mu_1, mu_2, posterior_eval, add = TRUE)
perm = permutations(C,C)
log_l(mu[perm[1,]], w= w[perm[1,]], x= x)
log_l(mu[perm[2,]], w= w[perm[2,]], x= x)
init = list(mu = mu, z = z)
hyper = list(
alpha_0 = rep(1, C),
mu_0 = 0,
tau_0 = 10 ^ (-6),
shape_0 = 10 ^ (-3),
rate_0 = 10 ^ (-3)
)
source('~/Desktop/Uni/computational/final_project/final_project.R')
monkeys = list(
"N" <- 48
"y" <- c(529.0,530.0,532.0,533.1,533.4,533.6,533.7,534.1,534.8,535.3,
535.4,535.9,536.1,536.3,536.4,536.6,537.0,537.4,537.5,538.3,
538.5,538.6,539.4,539.6,540.4,540.8,542.0,542.8,543.0,543.5,
543.8,543.9,545.3,546.2,548.8,548.7,548.9,549.0,549.4,549.9,
550.6,551.2,551.4,551.5,551.6,552.8,552.9,553.2)
"Itot" <- c(1,1)
)
monkeys = list(
"N" = 48,
"y" = c(529.0,530.0,532.0,533.1,533.4,533.6,533.7,534.1,534.8,535.3,
535.4,535.9,536.1,536.3,536.4,536.6,537.0,537.4,537.5,538.3,
538.5,538.6,539.4,539.6,540.4,540.8,542.0,542.8,543.0,543.5,
543.8,543.9,545.3,546.2,548.8,548.7,548.9,549.0,549.4,549.9,
550.6,551.2,551.4,551.5,551.6,552.8,552.9,553.2),
"Itot" = c(1,1)
)
monkeys_inits = list(
"lambda" = c(535,NA),
"theta" =  5,
"tau" =  0.1,
"T" = c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
)
monkeys_data = list(
"N" = 48,
"y" = c(529.0,530.0,532.0,533.1,533.4,533.6,533.7,534.1,534.8,535.3,
535.4,535.9,536.1,536.3,536.4,536.6,537.0,537.4,537.5,538.3,
538.5,538.6,539.4,539.6,540.4,540.8,542.0,542.8,543.0,543.5,
543.8,543.9,545.3,546.2,548.8,548.7,548.9,549.0,549.4,549.9,
550.6,551.2,551.4,551.5,551.6,552.8,552.9,553.2),
"Itot" = c(1,1)
)
z = binary_group_ind(monkeys_inits$T)
z = binary_group_ind(monkeys_inits$T, 2)
z
z = binary_group_ind(monkeys_inits$T, 2)
mus = c(535, 500)
gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z))
gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z), hyper)
gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z), hyper = hyper)
hyper
hyper = list(
alpha_0 = c(4,4),
mu_0 = 0,
tau_0 = 10 ^ (-6),
shape_0 = 10 ^ (-3),
rate_0 = 10 ^ (-3)
)
gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z), hyper = hyper)
gr(W_m, Mu_m, Tau_m)%=%gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z), hyper = hyper)
colMeans(W_m)
Z
colMeans(Z)
colMeans(W_m)
colMeans(Mu)
colMeans(Mu_m)
mean(Tau_m)
MC_m= show_mcmc(cbind(W_m, Mu_m, Tau_m))
params = list('P', 'lambda', 'tau')
monkyes = jags(
data = monkeys_data,
inits = monkeys_inits,
parameters.to.save = params,
model.file = "model.txt",
n.chains = 1,
n.iter = 20000
)
length(inits)
length(monkeys_inits)
monkyes = jags(
data = monkeys_data,
inits = list(monkeys_inits),
parameters.to.save = params,
model.file = "model.txt",
n.chains = 1,
n.iter = 10000
)
monkyes = jags(
data = monkeys_data,
inits = list(monkeys_inits),
parameters.to.save = params,
model.file = "model.txt",
n.chains = 1,
n.iter = 10000
)
monkyes = jags(
data = monkeys_data,
inits = list(monkeys_inits),
model.file = "model.txt",
n.chains = 1,
n.iter = 10000
)
monkyes = jags.model('model.txt', monkeys_data, monkeys_inits, n.chains = 2
)
dir_file = 'examples/classic-bugs/vol2/eyes/'
monkyes = jags.model(dir_file+'monkeys2.bug', monkeys_data, monkeys_inits, n.chains = 2
)
monkyes = jags.model(paste(dir_file,'monkeys2.bug'), monkeys_data, monkeys_inits, n.chains = 2)
monkyes = jags.model(paste(dir_file,'eyes2.bug'), monkeys_data, monkeys_inits, n.chains = 2)
dir_file = 'examples/classic-bugs/vol2/eyes/'
monkyes = jags.model(paste(dir_file,'eyes2.bug'), monkeys_data, monkeys_inits, n.chains = 2)
monkyes = jags.model(dir_model, monkeys_data, monkeys_inits, n.chains = 2)
dir_file = 'examples/classic-bugs/vol2/eyes/eyes2.bug'
monkyes = jags.model(dir_file, monkeys_data, monkeys_inits, n.chains = 2)
m_model = jags.model(dir_file, monkeys_data, monkeys_inits, n.chains = 2)
m_model = jags.model(dir_file, monkeys_data, monkeys_inits, n.chains = 2,)
coda.samples(m_model, params, thin = 20, n.iter = 10000)
params = c('P', 'lambda', 'tau')
res = coda.samples(m_model, params, thin = 20, n.iter = 10000)
summary(res)
show_mcmc(res)
res
View(res)
res$1
res$
res
attributes(res)
names(res)
m_model = jags.model(dir_file, monkeys_data, monkeys_inits, n.chains = 1)
res = coda.samples(m_model, params, thin = 20, n.iter = 10000)
summary(res)
show_mcmc(res)
m_jags= show_mcmc(res)
summary(res)
summary(res)
summary(MC_m)
library(wrassp)
setwd("~/Desktop/Uni/stat_learn/hw_2")
library(tuneR)
library(e1071)
library(parallelSVM)
suppressPackageStartupMessages( require(signal, quietly = TRUE) )
x <- read.AsspDataObj('data/f1.au')
filenames = list.files('data', pattern='*.au', full.names = TRUE)
tracks = lapply(filenames, read.AsspDataObj)
y = read.table('data/Labels.txt')
fs = 11025
frame_labels = c()
x_list = matrix(0, ncol=13)
setWavPlayer('afplay')
play(xwv)
xwv = Wave(as.numeric(x$audio), samp.rate = rate.AsspDataObj(x), bit = 16)
setWavPlayer('afplay')
play(xwv)
labels = source('Labels.txt')
labels = read.table('Labels.txt')
labels = read.table('labels.txt')
labels = read.table('Data/Labels.txt')
View(labels)
x <- read.AsspDataObj('data/f2.au')
xwv = Wave(as.numeric(x$audio), samp.rate = rate.AsspDataObj(x), bit = 16)
class(xwv)
setWavPlayer('afplay')
play(xwv)
x <- read.AsspDataObj('data/f3.au')
xwv = Wave(as.numeric(x$audio), samp.rate = rate.AsspDataObj(x), bit = 16)
class(xwv)
setWavPlayer('afplay')
play(xwv)
x <- read.AsspDataObj('data/f36.au')
xwv = Wave(as.numeric(x$audio), samp.rate = rate.AsspDataObj(x), bit = 16)
class(xwv)
setWavPlayer('afplay')
play(xwv)
x <- read.AsspDataObj('data/f84.au')
xwv = Wave(as.numeric(x$audio), samp.rate = rate.AsspDataObj(x), bit = 16)
class(xwv)
setWavPlayer('afplay')
play(xwv)
library(rjags)
library(R2jags)
library(MASS)
library(PLMIX)
library(rjags)
library(R2jags)
library(MASS)
library(PLMIX)
library(gtools)
library(mclust)
library(label.switching)
source('helper.R')
setwd("~/Desktop/Uni/computational/final_project")
source('helper.R')
setwd("~/Desktop/Uni/computational/final_project")
set.seed(1234)
N = 100
w = c(0.2, 0.8)
C = 2
comp = sample(1:C,
prob = w,
size = N,
replace = TRUE)
mu = rnorm(C, 0, 10)
tau = rgamma(1, 2, 6)
x = rnorm(n = N,
mean = mu[comp],
sd = sqrt(1 / tau))
z = binary_group_ind(comp, G = C)
curve(d_norm_mix(x, mu = mu, tau = tau, w = w),
from = -10,
to = 10)
all_S = mix_gauss_2D(mu, tau, z)
plot(
x = all_S[, 1],
y = all_S[, 2],
col = all_S[, 3],
pch = 16,
cex = .7,
xlab = 'x1',
ylab = 'x2',
main = 'Mix'
)
mu_1=seq(-10,10,length.out=length(x))
mu_2=seq(-10,10,length.out=length(x))
plot(mu_1, eval_l(mu_1,mu_2, w = w , x = x, TRUE), type='l', ylab = 'log-likelihood')
posterior_eval = outer(mu_1, mu_2, eval_l, w=w, x=x)
image(mu_1, mu_2, posterior_eval, xlab = expression(mu1), ylab = expression(mu2))
contour(mu_1, mu_2, posterior_eval, add = TRUE)
perm = permutations(C,C)
log_l(mu[perm[1,]], w= w[perm[1,]], x= x)
log_l(mu[perm[2,]], w= w[perm[2,]], x= x)
init = list(mu = mu, z = z)
perm = permutations(C,C)
?permutations
perm = gtools::permutations(C,C)
perm
log_l(mu[perm[1,]], w= w[perm[1,]], x= x)
log_l(mu[perm[2,]], w= w[perm[2,]], x= x)
init = list(mu = mu, z = z)
hyper = list(
alpha_0 = rep(1, C),
mu_0 = 0,
tau_0 = 10 ^ (-6),
shape_0 = 10 ^ (-3),
rate_0 = 10 ^ (-3)
)
gr(W, Mu, Tau)%=%gibbs_mix(x, init, hyper, predict_x = FALSE, n_iter = 10000)
MC_ = show_mcmc(cbind(W,Mu, Tau))
mc_clust = Mclust(x,G=C)
mle = mc_clust$parameters$mean
Z = binary_group_ind(mc_clust$classification, G =2)
gr(W_mle, Mu_mle, Tau_mle) %=% gibbs_mix(x, init = list(mu=mle, z = Z), hyper, predict_x = FALSE, n_iter = 10000)
show_mcmc(cbind(W_mle, Mu, Tau))
MC_mle = show_mcmc(cbind(W_mle, Mu_ml, Tau_mle))
MC_mle = show_mcmc(cbind(W_mle, Mu_mle, Tau_mle))
L=nrow(W_mle)
J = 3
mcmc_samples=array(c(Mu_mle,Tau_mle,W_mle),dim=c(L,C,J))
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust$parameters$mean, 1/mc_clust$parameters$variance$sigmasq, mc_clust$parameters$pro))
permuted_mcmc = permute.mcmc(mcmc =  mcmc_samples, permutations = pra_out$permutations)
apply(permuted_mcmc$output, 3, colMeans)
apply(permuted_mcmc$output, 2:3, sd)
par(mfrow=c(1,1))
plot(permuted_mcmc$output[,1,3], type='l', ylim=c(-10,10))
lines(permuted_mcmc$output[,2,3], type='l', col='red')
mu
mus
mu
w
sd
tau
permuted_mcmc
permuted_mcmc$output
View(permuted_mcmc$output[,1])
View(permuted_mcmc$output[,1,])
colMeans(permuted_mcmc$output[,1,])
colMeans(permuted_mcmc$output[,1,])
colMeans(permuted_mcmc$output[,2,])
unlist(apply(permuted_mcmc$output, 3, colMeans))
monkeys_data = list(
"N" = 48,
"y" = c(529.0,530.0,532.0,533.1,533.4,533.6,533.7,534.1,534.8,535.3,
535.4,535.9,536.1,536.3,536.4,536.6,537.0,537.4,537.5,538.3,
538.5,538.6,539.4,539.6,540.4,540.8,542.0,542.8,543.0,543.5,
543.8,543.9,545.3,546.2,548.8,548.7,548.9,549.0,549.4,549.9,
550.6,551.2,551.4,551.5,551.6,552.8,552.9,553.2),
"Itot" = c(1,1)
)
monkeys_inits = list(
"lambda" = c(535,NA),
"theta" =  5,
"tau" =  0.1,
"T" = c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
)
z = binary_group_ind(monkeys_inits$T, 2)
mus = c(535, 500)
hyper = list(
alpha_0 = c(4,4),
mu_0 = 0,
tau_0 = 10 ^ (-6),
shape_0 = 10 ^ (-3),
rate_0 = 10 ^ (-3)
)
gr(W_m, Mu_m, Tau_m)%=%gibbs_mix(monkeys_data$y, init = list(mu = mus, z = z), hyper = hyper)
colMeans(W_m)
colMeans(Mu_m)
mean(Tau_m)
MC_m= show_mcmc(cbind(W_m, Mu_m, Tau_m))
params = c('P', 'lambda', 'tau')
dir_file = 'examples/classic-bugs/vol2/eyes/eyes2.bug'
m_model = jags.model(dir_file, monkeys_data, monkeys_inits, n.chains = 1)
res = coda.samples(m_model, params, thin = 20, n.iter = 10000)
summary(res)
summary(MC_m)
m_jags= show_mcmc(res)
mc_clust_monkeys = Mclust(data = monkeys_data$y)
mcmc_samples=array(c(Mu_m,Tau_m,W_m),dim=c(L,C,J))
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust_monkeys$parameters$mean, 1/mc_clust_monkeys$parameters$variance$sigmasq, mc_clust_monkeys$parameters$pro))
permuted_mcmc = permute.mcmc(mcmc =  mcmc_samples, permutations = pra_out$permutations)
head(permuted_mcmc)
head(permuted_mcmc$output)
apply(permuted_mcmc$output, 3, colMeans)
apply(permuted_mcmc$output, 2:3, sd)
gr(W_m, Mu_m, Tau_m)%=%gibbs_mix(monkeys_data$y, init = list(mu = mc_clust_monkeys$parameters$mean, z = binary_group_ind(mc_clust_monkeys$parameters$pro,2)), hyper = hyper)
mc_clust_monkeys$parameters$mean
binary_group_ind(mc_clust_monkeys$parameters$pro,2)
mc_clust_monkeys$parameters$pro
gr(W_m, Mu_m, Tau_m)%=%gibbs_mix(monkeys_data$y, init = list(mu = mc_clust_monkeys$parameters$mean, z = t(rmultinom(48, 1, mc_clust$parameters$pro))), hyper = hyper)
mc_clust_monkeys = Mclust(data = monkeys_data$y)
L=nrow(W_m)
J = 3
mcmc_samples=array(c(Mu_m,Tau_m,W_m),dim=c(L,C,J))
pra_out = pra(mcmc.pars = mcmc_samples, pivot = cbind(mc_clust_monkeys$parameters$mean, 1/mc_clust_monkeys$parameters$variance$sigmasq, mc_clust_monkeys$parameters$pro))
permuted_mcmc = permute.mcmc(mcmc =  mcmc_samples, permutations = pra_out$permutations)
apply(permuted_mcmc$output, 3, colMeans)
apply(permuted_mcmc$output, 2:3, sd)
summary(res)
?mcmc
?coda
help(coda)
window.mcmc(W_m)
window(W_m, 100, 1000)
plot(window(W_m, 100, 1000,20))
plot(100:1000,window(W_m, 100, 1000,20))
plot(100:1000,window(W_m, 100, 1000,20)[1])
plot(100:1000,window(W_m, 100, 1000,20)[,1])
plot(100:1000,window(W_m, 100, 1000,20)[,1], type='l')
acf(W_m)
acf(res[,1])
res
res$data
res = coda.samples(m_model, params, thin = 20, n.iter = 10000)[[1]]
res
acf(res)
acf(res[,1])
densplot(res[,1])
HPDinterval(res)
HPDinterval(W)
HPDinterval(W_m)
HPDinterval(MC_)
HPDinterval(MC_m)
thin(W)
?thin(W)
traceplot(res)
effectiveSize(W_m)
effectiveSize(res)
effectiveSize(MC_m)
